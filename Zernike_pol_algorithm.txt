//   Pseudo-code to calculate unit-normalized Zernike polynomials and their x,y derivatives
//
//     Numbering scheme: 
//     Within a radial order, sine terms come first
//             ...
//           sin((n-2m)*theta)   for m = 0,..., [(n+1)/2]-1
//             ...
//              1                for n even, m = n/2
//             ...
//           cos((n-2m)*theta)   for m = [n/2]+1,...,n
//             ...
//
//     INPUT: 
//     x, y normalized (x,y) coordinates in unit circle
//     MaxOrd: Maximum Zernike radial order
//
//     OUTPUT:
//     Zern[...]   array to receive value of each Zernike polynomium at (x,y)
//     dUdx[...]   array to receive each derivative dU/dx at (x,y)
//     dUdy[...]   array to receive each derivative dU/dy at (x,y)
//
      int MaxOrd
      double x, y, Zern[*], dUdx[*], dUdy[*]
//
      int nn, mm, kndx, jbeg, jend, jndx, even, nn1, nn2
      int jndx1, jndx11, jndx2, jndx21
      double pval, qval
//
      Zern[1] = 1.                                  // (0,0)
      dUdx[1] = 0.                                  // (0,0)
      dUdy[1] = 0.                                  // (0,0)
//
      Zern[2] = y                                   // (1,0)
      Zern[3] = x                                   // (1,1)
      dUdx[2] = 0.                                  // (1,0)
      dUdx[3] = 1.                                  // (1,1)
      dUdy[2] = 1.                                  // (1,0)
      dUdy[3] = 0.                                  // (1,1)
//
      kndx = 1                // index for term from 2 orders down
      jbeg = 2                // start index for current radial order
      jend = 3                // end index for current radial order
      jndx = 3                // running index for current Zern
      even = -1
//  Outer loop in radial order index
      for (nn = 2; nn <= MaxOrd; nn++)
      {
      even   = -even          // parity of radial index
      jndx1  = jbeg           // index for 1st ascending series in x
      jndx2  = jend           // index for 1st descending series in y
      jndx11 = jndx1 – 1      // index for 2nd ascending series in x
      jndx21 = jndx2 + 1      // index for 2nd descending series in y
      jbeg   = jend + 1       // end of previous radial order +1
      nn2    = nn/2
      nn1    = (nn-1)/2
//  Inner loop in azimuthal index
      for (mm = 0; mm <= nn; mm++)
      {
      Jndx++                  // increment running index for current Zern

      if (mm == 0)
        Zern[jndx] = x*Zern[jndx1] + y*Zern[jndx2]
        dUdx[jndx] = Zern[jndx1]*nn
        dUdy[jndx] = Zern[jndx2]*nn
      
      else if (mm == nn)
        Zern[jndx] = x*Zern[jndx11] - y*Zern[jndx21]
        dUdx[jndx] = Zern[jndx11]*nn
        dUdy[jndx] = -Zern[jndx21]*nn
      
      else if ((even>0) && (mm==nn2))              // logical “AND”
        Zern[jndx] = 2.*(x*Zern[jndx1]+y*Zern[jndx2]) - Zern[kndx]
        dUdx[jndx] = 2.*nn*Zern[jndx1] + dUdx[kndx]
        dUdy[jndx] = 2.*nn*Zern[jndx2] + dUdy[kndx]
        kndx++                        // increment kndx
      
      else if ((even<0) && (mm==nn1))              // logical “AND”
        qval = Zern[jndx2] – Zern[jndx21]
        Zern[jndx] = x*Zern[jndx11] + y*qval - Zern[kndx]
        dUdx[jndx] = Zern[jndx11]*nn + dUdx[kndx]
        dUdy[jndx] = qval*nn + dUdy[kndx]
        kndx++                        // increment kndx
      
      else if ((even<0) && (mm==nn1+1))            // logical “AND”
        pval = Zern[jndx1] + Zern[jndx11]
        Zern[jndx] = x*pval + y*Zern[jndx2] – Zern[kndx]
        dUdx[jndx] = pval*nn + dUdx[kndx]
        dUdy[jndx] = Zern[jndx2]*nn + dUdy[kndx]
        kndx++                        // increment kndx
      
      else
        pval = Zern[jndx1] + Zern[jndx11]
        qval = Zern[jndx2] – Zern[jndx21]
        Zern[jndx] = x*pval + y*qval – Zern[kndx]
        dUdx[jndx] = pval*nn + dUdx[kndx]
        dUdy[jndx] = qval*nn + dUdy[kndx]
        kndx++                        // increment kndx

      jndx11 = jndx1                   // update indices
      jndx1++
      jndx21 = jndx2
      jndx2--
      }          // End of inner azimuthal loop

      jend = jndx
      }          // End of outer radial order loop

